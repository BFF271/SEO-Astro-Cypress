---
interface OpenGraphImageProps {
	url?: string, 
	secureUrl?: string; 
	type?: string;
	width?: number;
	height?: number;
	alt?: string; 
}

export interface Props {
  title?: string;
	description?: string;
	canonical?: string;
	nofollow?: boolean;
	noindex?: boolean;
	openGraph?: {
		basic: {
			title: string;
			type: string;
			image: string;
			url: string;
		},
		optional?: {
			audio?: string;
			description?: string; 
			determiner?: string; 
			locale?: string; 
			localeAlternate?: Array<string>;
			siteName?: string;
			video?: string;
		},
		image?: {
			url?: string, 
			secureUrl?: string; 
			type?: string;
			width?: number;
			height?: number;
			alt?: string; 
		}
	},
	twitter?: {
		card?: string;
		site?: string;
		creator?: string;
	}
}

const { 
	title,
	description,
	canonical,
	noindex,
	nofollow,
	openGraph
} = Astro.props

if (openGraph) {
	if (
		!openGraph.basic
		|| openGraph.basic.title == null
		|| openGraph.basic.type == null
		|| openGraph.basic.image == null
		|| openGraph.basic.url == null
	) {
		throw new Error("If you pass the openGraph prop, you have to define the basic properties title, type, image, and url!")
	}
}

if (description && openGraph?.optional?.description) {
	if (description == openGraph.optional.description) {
		console.warn("WARNING(astro-seo): You passed the same value to `description` and `openGraph.optional.description`. This is most likely not what you want. See docs for more.")
	}
}

if (openGraph?.basic?.image && !openGraph?.image?.alt) {
	console.warn("WARNING(astro-seo): You defined `openGraph.basic.image`, but didn't define `openGraph.image.alt`. This is stongly discouraged.'")
}

function generateOpenGraphImageTags(props: Props) {
	if (props.openGraph?.image) {
		const {
			url,
			secureUrl, 
			type,
			width,
			height,
			alt
		} = props.openGraph.image;

		return (
			<Fragment>
				<meta property="og:image:url" content={openGraph.basic.image} />	
				{secureUrl ? (
					<meta property="og:image:secure_url" content={secureUrl} />	
				) : null }
				{type ? (
					<meta property="og:image:type" content={type} />	
				) : null }
				{width ? (
					<meta property="og:image:width" content={width} />	
				) : null }
				{!(height === null) ? (
					<meta property="og:image:height" content={height} />	
				) : null }
				{!(alt === null) ? (
					<meta property="og:image:alt" content={alt} />	
				) : null }
			</Fragment>
		)
	}
}

function generateTwitterTags(props: Props) {
	if (props.twitter) {
		const {
			card,
			site,
			creator
		} = props.twitter;

		return (
			<Fragment>
				{ card ? (
					<meta name="twitter:card" content={card}/>
				) : null}
				{ site ? (
					<meta name="twitter:site" content={site}/>
				) : null}
				{ creator ? (
					<meta name="twitter:creator" content={creator}/>
				) : null}
			</Fragment>
		)
	}
}
---
{ title ? <title>{title}</title> : null }

{ canonical ? (
	<link 
		rel="canonical"
		href={canonical} 
	/>
) : null}

{ description ? (
	<meta
  	name="description"
  	content={description}
  />
) : null }

<meta 
	name="robots"
	content={`${noindex ? 'noindex' : 'index'},${nofollow ? 'nofollow' : 'follow'}`}
>

{ openGraph ? (
	<Fragment>
		<meta property="og:title" content={openGraph.basic.title}>
		<meta property="og:type" content={openGraph.basic.type}>
		<meta property="og:image" content={openGraph.basic.image}>
		<meta property="og:url" content={openGraph.basic.url}>
	</Fragment>
) : null }

{ openGraph?.optional ? (
	<Fragment>
		{ openGraph.optional.audio ? (
			<meta property="og:audio" content={openGraph.optional.audio}>
		) : null }
		{ openGraph.optional.description ? (
			<meta property="og:description" content={openGraph.optional.description}>
		) : null }
		{ openGraph.optional.determiner ? (
			<meta property="og:determiner" content={openGraph.optional.determiner}>
		) : null }
		{ openGraph.optional.locale ? (
			<meta property="og:locale" content={openGraph.optional.locale}>
		) : null }
		{ openGraph.optional.localeAlternate?.map((locale) => (
			<meta property="og:locale:alternate" content={locale}>
		))}
		{ openGraph.optional.siteName ? (
			<meta property="og:site_name" content={openGraph.optional.siteName }>
		) : null}
		{ openGraph.optional.video ? (
			<meta property="og:video" content={openGraph.optional.video }>
		) : null }
	</Fragment>
) : null }

{generateOpenGraphImageTags(props)}
{generateTwitterTags(props)}
